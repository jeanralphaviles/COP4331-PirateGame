/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.viewport;

import java.awt.BorderLayout;
import java.util.ArrayList;

import model.GameObject;
import utility.IntentComponentMap;

/**
 *
 * @author comcc_000
 */
public class DialogueScreenViewport extends ViewPort {

    /*Properites*/

    public DialogueScreenViewport() {
        interiorViewports.add(new FlavorImageViewport());
        interiorViewports.add(new DialogueViewport());
        add(interiorViewports.get(0), BorderLayout.NORTH);
        add(interiorViewports.get(1), BorderLayout.SOUTH);
    }

    @Override
    public void updateView(GameObject gameObject) {
        int numInteriorViewports = interiorViewports.size();
        ViewPort viewport;
        for (int i=0; i<numInteriorViewports; i++) {
            viewport = interiorViewports.get(i);
            viewport.updateView(gameObject);
        }
    }

    @Override
    public ArrayList<IntentComponentMap> generateIntentComponentMapping() {
        ArrayList<IntentComponentMap> icms = new ArrayList<IntentComponentMap>(1);
        ArrayList<IntentComponentMap> temp_icms = new ArrayList<IntentComponentMap>(1);
        int numInteriorViewports = interiorViewports.size();
        ViewPort viewport;
        for (int i=0; i<numInteriorViewports; i++) {
            viewport = interiorViewports.get(i);
            temp_icms = viewport.generateIntentComponentMapping();
            aggregateICMs(icms, temp_icms);
        }
        return icms;
    }
    
    private void aggregateICMs(ArrayList<IntentComponentMap> icms1, ArrayList<IntentComponentMap> icms2) {
        int numICMs2 = icms2.size();
        for (int i=0; i<numICMs2; i++) {
            icms1.add(icms2.get(i));
        }
    }

//    private void initInteriorViewports() {
//        interiorViewports.add(new FlavorImageViewport());
//        interiorViewports.add(new DialogueViewport());
//    }
//
//    private void addInteriorViewports() {
//        int numInteriorViewports = interiorViewports.size();
//        ViewPort view;
//        JPanel panel;
//        for (int i = 0; i < numInteriorViewports; i++) {
//            view = interiorViewports.get(i);
//            panel = (JPanel) view;
//            int y = this.getHeight() - this.getHeight()/(i+1);
//            int height = this.getHeight()/numInteriorViewports;
//            panel.setBounds(0, y, getWidth(), height);
//            add(panel);
//        }
//    }

    /* Inner classes */
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed"
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}

